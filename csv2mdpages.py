import click
import logging
import csv
from mdutils.mdutils import MdUtils
import os
from string import capwords
# from datetime import datetime

"""
This script converts each row in a CSV file into a Markdown file.

Usage:
    python csv-to-md.py [OPTIONS] CSV_FILE

Arguments:
    CSV_FILE       Location of the CSV file to convert to Markdown files.

Options:
    --csv-headers  Whether the CSV file has headers or not. Default is True.
    --output-dir   Output directory for the Markdown files. Default is the current directory.
    --create-directories  Create folder structure for output files. Default is True.
"""


def fileNameFormatter(row):
    ext = ".md"
    city_name = row['CITY'].replace(' ', '-').lower()
    state_name = row['STATE'].replace(' ', '-').lower()
    return city_name + '_' + state_name + ext


def filePathFormatter(row):
    region = "region-" + row['REGION_NUM']
    forest = row['FOREST_NAME'].replace(" ", "-").replace(".", "").lower()
    district = row['DISTRICT_NAME'].replace(" ", "-").lower()
    return os.path.join(region, forest, district)


def buildMarkdown(row):
    logging.debug(row)
    mdFile = MdUtils(file_name=fileNameFormatter(row),
                     title=capwords(row['LOCATION']),
                     author="Big Ernie")
    logging.debug("Markdown file created.")
    # mdFile.new_line()
    mdFile.new_line("# Information")
    logging.debug("Information heading added.")
    # TODO: automatically create link to region-row['REGION_NUM'].md
    mdFile.new_line(f"* Region Name: [{row['REGION_NAME']}]()")
    logging.debug("Region name added.")
    mdFile.new_line(f"* Region Number: {row['REGION_NUM']}")
    logging.debug("Region number added.")
    # TODO: automatically create link to forest-row['FOREST_NAME'].md
    # Forest page will contain URL to forest
    # FIXME: capwords() doesn't work on hypenated forest names
    mdFile.new_line(f"* Forest: [{capwords(row['FOREST_NAME'])}]({row['FOREST_URL']})")
    logging.debug("Forest name added.")
    # TODO: automatically create link to district-row['DISTRICT_NAME'].md
    mdFile.new_line(f"* Ranger District: [{capwords(row['DISTRICT_NAME'])}]()")
    logging.debug("Ranger district added.")
    logging.debug("Starting Module split")
    mdFile.new_line("* Modules:")
    # FIXME: modules aren't alphabetized
    for module in sorted(row['MODULES'].split(",")):
        if module.strip() == "":
            mdFile.new_line("  - Unknown")
        else:
            mdFile.new_line(f"  - {module.strip()}")
    logging.debug("Modules added.")

    if len(row['HOUSING']) == 0:
        housing = "Unknown"
    else:
        housing = row['HOUSING'].capitalize()
    mdFile.new_line(f"* Housing: {housing}")
    logging.debug("Housing added.")
    mdFile.new_line()
    mdFile.new_line("## Notes")
    logging.debug("Notes heading added.")
    mdFile.new_paragraph(row['NOTES'])
    logging.debug("Notes added.")
    # mdFile.new_line()
    # mdFile.new_line("Automatically generated by csv-to-md.py on "
    #                + datetime.now().strftime("%Y-%m-%d @ %H:%M:%S"))
    # logging.debug("Footer added.")
    return mdFile


@click.command(no_args_is_help=True, context_settings={"ignore_unknown_options": True})
@click.argument('csv_file', type=click.Path(exists=True, readable=True, resolve_path=True, file_okay=True),
                default="./data.csv", nargs=1)
@click.option("--csv-headers",
              default=True, show_default=True,
              help="Whether the CSV file has headers or not.")
@click.option("-o", "--output-dir", type=click.Path(resolve_path=True),
              default=".", show_default=True,
              help="Output directory for the Markdown files.")
@click.option("-d", "--create-directories",
              default=True, show_default=True,
              help="Create folder structure for output files.")
@click.option("-v", "--verbose", is_flag=True, default=False)
@click.option("-vv", "--very-verbose", is_flag=True, default=False)
def convert(csv_file, csv_headers, output_dir, create_directories, verbose, very_verbose):
    """This script converts each row in a CSV file into a Markdown file."""
    if verbose:
        logging.basicConfig(level=logging.INFO)
    if very_verbose:
        logging.basicConfig(level=logging.DEBUG)

    logging.debug("CSV file to convert: %s" % csv_file)
    logging.debug("CSV headers: %s" % csv_headers)
    logging.debug("Output directory: %s" % output_dir)
    logging.debug("Create directories: %s" % create_directories)

    row_count = 0
    try:
        logging.info("Checking whether directory already exists...")
        if not os.path.exists(output_dir):
            logging.debug("Directory %s does not exist" % output_dir)
            os.mkdir(output_dir)
            logging.debug("Output directory %s created" % output_dir)
        else:
            logging.debug("Directory %s already exists" % output_dir)

        with open(csv_file, "r", encoding="utf-8") as csv_file:
            if not csv_headers:
                # Not really planning on using this ever. Why wouldn't your csv file have headers?
                # How would you know what which values are which?
                csv_reader = csv.reader(csv_file, delimiter=',')
            else:
                csv_reader = csv.DictReader(csv_file, delimiter=',', dialect='excel')

            for row in csv_reader:
                mdFile = buildMarkdown(row)

                # Creates a directory structure based on the headers in the CSV
                if create_directories:
                    logging.debug("Building directory structure...")
                    path = os.path.join(output_dir, filePathFormatter(row))
                    logging.debug(path)
                    os.makedirs(path, exist_ok=True)
                    os.chdir(path)
                mdFile.create_md_file()
                os.chdir(output_dir)
                row_count += 1
                pass

        print(f"Conversion complete. Processed {row_count} rows.")

    except FileNotFoundError as e:
        print(f"Error: File '{csv_file}' not found.")
        logging.debug("Error Args: %s" % e.args)
        logging.debug("Traceback: %s" % e.with_traceback)
    except csv.Error as e:
        print("CSV Error:", e)
    except Exception as e:
        print("Error while converting:", e)


if __name__ == "__main__":
    convert()
